import { Html5QrcodeScanner } from "html5-qrcode/esm/html5-qrcode-scanner";
import axios from "axios";

/**
 * Qu√©t QR code b·∫±ng camera.
 * @param {Function} onScan - Callback khi qu√©t th√†nh c√¥ng.
 */
export const startQRScanner = (onScan) => {
  // Log camera access for debugging
  navigator.mediaDevices
    .getUserMedia({ video: true })
    .then((stream) => console.log("üé• Camera ho·∫°t ƒë·ªông OK", stream))
    .catch((err) => console.error("‚ùå L·ªói camera:", err));

  // console.log("üì¶ Phi√™n b·∫£n tr√¨nh duy·ªát:", navigator.userAgent);

  // Create and render the scanner
  const scanner = new Html5QrcodeScanner("qr-reader", {
    fps: 10,
    qrbox: { width: 250, height: 250 },
    rememberLastUsedCamera: true,
    verbose: true,
    experimentalFeatures: { useBarCodeDetectorIfSupported: true },
  });

  scanner.render(
    (decodedText) => {
      // console.log("‚úÖ QR Code Detected:", decodedText);

      try {
        // Try to parse the QR content as JSON if it's in JSON format
        let parsedData = decodedText;
        if (decodedText.startsWith("{") && decodedText.endsWith("}")) {
          parsedData = JSON.parse(decodedText);
          // console.log("üìå Parsed JSON data:", parsedData);
        }

        // Pass the data to the callback
        onScan(parsedData);
        alert("üìå M√£ QR ƒë√£ qu√©t th√†nh c√¥ng!");
      } catch (error) {
        console.error("Error parsing QR data:", error);
        // If parsing fails, pass the raw text
        onScan(decodedText);
        alert("üìå M√£ QR: " + decodedText);
      }

      // Clear the scanner after successful scan
      setTimeout(() => scanner.clear(), 500);
    },
    (error) => {
      if (error.name === "NotFoundException") {
        console.warn(
          "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y QR code. H√£y ƒë·∫£m b·∫£o m√£ QR r√µ r√†ng v√† n·∫±m trong khung qu√©t!"
        );
      } else if (
        error.message &&
        error.message.includes("No MultiFormat Readers")
      ) {
        console.error(
          "üö® Kh√¥ng c√≥ tr√¨nh ƒë·ªçc QR h·ª£p l·ªá. H√£y ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t th∆∞ vi·ªán!"
        );
      } else if (error.name === "ChecksumException") {
        console.warn("‚ö†Ô∏è M√£ QR kh√¥ng h·ª£p l·ªá (sai checksum). Th·ª≠ qu√©t l·∫°i!");
      } else if (error.name === "FormatException") {
        console.warn("‚ö†Ô∏è ƒê·ªãnh d·∫°ng QR code kh√¥ng ƒë√∫ng ho·∫∑c b·ªã m·ªù!");
      } else if (error.name === "NotAllowedError") {
        console.error(
          "üö® Tr√¨nh duy·ªát ch·∫∑n quy·ªÅn truy c·∫≠p camera! H√£y c·∫•p quy·ªÅn."
        );
      } else if (error.name === "NotReadableError") {
        console.error(
          "üö® Camera ƒëang b·ªã s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c ho·∫∑c l·ªói ph·∫ßn c·ª©ng."
        );
      } else if (error.name === "OverconstrainedError") {
        console.error("üö® Kh√¥ng t√¨m th·∫•y camera ph√π h·ª£p v·ªõi y√™u c·∫ßu.");
      } else {
        console.error("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:", error);
      }
    }
  );
};

/**
 * G·ª≠i ·∫£nh QR l√™n backend ƒë·ªÉ gi·∫£i m√£ v√† ƒëƒÉng nh·∫≠p.
 * @param {File} file - ·∫¢nh QR code.
 * @param {Function} onSuccess - Callback khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng.
 * @param {Function} onError - Callback khi g·∫∑p l·ªói.
 */
export const uploadQRImage = async (file, onSuccess, onError) => {
  const formData = new FormData();
  formData.append("qr_image", file);

  const apiUrl = process.env.REACT_APP_API_URL || "";
  if (!apiUrl) {
    console.error("REACT_APP_API_URL is not set");
    onError("API URL not configured");
    return;
  }

  try {
    console.log("üì§ ƒêang g·ª≠i ·∫£nh QR l√™n server...");
    const response = await axios.post(`${apiUrl}/api/login`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
      withCredentials: true, // Include cookies if using session authentication
    });

    console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ server:", response);

    // Check if the response contains user data
    if (response.data && response.data.user) {
      onSuccess(response.data.user);
    } else if (response.data) {
      onSuccess(response.data);
    } else {
      onError("Kh√¥ng c√≥ d·ªØ li·ªáu trong ph·∫£n h·ªìi");
    }
  } catch (error) {
    console.error(
      "‚ùå L·ªói gi·∫£i m√£ QR t·ª´ server:",
      error.response?.data || error
    );

    const errorMessage =
      error.response?.data?.message ||
      error.message ||
      "Kh√¥ng th·ªÉ x·ª≠ l√Ω QR code";

    onError(errorMessage);
  }
};
